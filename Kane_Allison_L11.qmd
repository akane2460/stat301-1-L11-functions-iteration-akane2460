---
title: "L11 Functions and Iteration"
subtitle: "Data Science 1 with R (STAT 301-1)"
author: "Allison Kane"

format:
  html:
    toc: true
    embed-resources: true
    code-fold: show
    link-external-newwindow: true

execute:
  warning: false
  
from: markdown+emoji 
---

::: {.callout-tip icon=false}

## Github Repo Link

[Allison Github Link](https://github.com/stat301-1-2023-fall/L11-functions-iteration-akane2460.git)
:::


## Packages & Datasets

Datasets referenced in this lab are from the `palmerpenguins` and `mpg` packages. 

```{r}
#| label: load-pkgs-data
#| code-fold: false

# Loading package(s)

library(palmerpenguins)
library(tidyverse)
library(lubridate)
library(forcats)

```

## Exercises

### Exercise 1 

Practice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?

```{r}
#| label: ex-01
#| eval: false

# function 1
mean(is.na(x))

# function 2
x / sum(x, na.rm = TRUE)

# function 3
round(x / sum(x, na.rm = TRUE) * 100, 1)
```

::: {.callout-tip icon="false"}
## Solution

```{r}
# label: ex-01 solution

# function 1
function_1 <- function(x) {mean(is.na(x))}

# function 2 
function_2 <- function(x) {x / sum(x, na.rm = TRUE)}

# function 3
function_3 <- function(x) {round(x / sum(x, na.rm = TRUE) * 100, 1)}

```


:::

### Exercise 2

Write a function that returns how old you are in years, given your birthday (as `"YYYY-MM-DD"`). 

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex-02 solution

age_years <- function(x) {interval(ymd(x), today()) |>  as.period() |>  year()}

```


:::


### Exercise 3

Write a function that computes the mean, standard deviation, and count given a dataset and a numeric variable.

Test your function using the `penguins` dataset and a numeric variable of your choice.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 03

dataset_summary <- function(df, variable) {
  df |> summarize(mean = mean(variable, na.rm = TRUE),
                  sd = sd(variable, na.rm = TRUE),
                  n = n())}

dataset_summary(penguins, penguins$body_mass_g)

```


:::

### Exercise 4

Write a function that counts the number of missing observations given a dataset and a variable.

Test your function using the `penguins` dataset and a variable of your choice.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 04

dataset_missing <- function(df, variable) {
  df |> 
    filter(is.na(variable) == TRUE) |> 
    summarize(
    number_missing = n()
  )
}

# Test your function using the `penguins` dataset and a variable of your choice.
dataset_missing(penguins, penguins$body_mass_g)
```

:::


### Exercise 5

Write a function that draws a scatterplot given a dataset and x and y variables. Add a line of best fit and an appropriate title to the plot.

Test your function using the `penguins` dataset and an x and y variable of your choice.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 05

scatterplot <- function(df, x, y, title) {
  df |> 
    ggplot(aes(x = x, y = y)) +
    geom_point() +
    geom_smooth(method = loess, se = FALSE) +
    labs(title = title)}

scatterplot(penguins, penguins$body_mass_g, penguins$bill_length_mm, "Penguins Body Mass (g) vs. Bill Length (mm)")

```


:::


### Exercise 6

Use the `across()` function to...

a) compute the number of unique values in each column of `penguins`
b) compute the `mean` of every numeric column of `penguins`.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 06

# a) compute the number of unique values in each column of `penguins`

penguins |> 
  summarize(across(everything(), n_distinct))

# b) compute the mean of every numeric column of penguins.

penguins |> 
  summarize(across(where(is.numeric), ~ mean(., na.rm = TRUE)))

```


:::


### Exercise 7

Write code that uses one of the map functions to:

a) compute the number of unique values in each column of `penguins`
b) compute the `mean` of numeric every column in `penguins`.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label : ex 07

# a)
number_unique <- function(df) {
  df |> 
    summarize(across(everything(), n_distinct))
}

# b)

means_numeric <- function(df) {
  df |> 
    summarize(
      means = across(where(is.numeric), ~ mean(., na.rm = TRUE)))
}


```


:::


### Exercise 8

Write a `for` loop that uses your function in Exercise 3 to compute the mean, standard deviation, and count of every numeric variable in the `penguins` dataset.

Output the results as a nicely formatted table.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 08

dataset_summary <- function(df, variable) {
  df |> summarize(mean = mean(variable, na.rm = TRUE),
                  sd = sd(variable, na.rm = TRUE),
                  n = n())}

list_of_summaries <- list()

for (col in names(penguins)) {
  ifelse(is.numeric(penguins[[col]]) == TRUE,
         list_of_summaries[[col]] <- dataset_summary(penguins, penguins[[col]]),
         col_nonnumeric <- col
  )

}

as.tibble(list_of_summaries)


```


:::

### Exercise 9

Write a `for` loop that plots the distribution of each variable in the `penguins` dataset and saves each plot to a `\plots` subdirectory. 

Hint: need to determine if a variable is numeric or categorical to determine the appropriate plot.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 09

numeric_plot <- function(df, variable) {
  ggplot(data = df, aes(x = {{variable}})) +
    geom_histogram(stat = "count") +
    labs(
      title = "Distribution"
    )
}

categorical_plot <- function(df, variable) {
  ggplot(data = df, aes(x = {{variable}})) +
    geom_bar() +
    labs(
      title = "Distribution"
    )
}

for (col in names(penguins)) {
  filename <- str_c("plots/", col, "distribution.png", sep = "")
  
  ifelse(is.numeric(penguins[[col]]) == TRUE, 
         plot <- numeric_plot(penguins, col),
         plot <- categorical_plot(penguins, col)
         )
  
  ggsave(filename, plot)
}

```


:::

### Exercise 10

Determine which variables in the `mpg` dataset should be factors and convert them to factors using a `for` loop.

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 10

variables_to_factor <- c("manufacturer", "model", "drv", "trans", "class")

for (var in variables_to_factor) {
  mpg[[var]] <- as_factor(mpg[[var]])
}

```


:::

### Exercise 11

The `data` subdirectory has various CSV files that you want to read in. 

First, store their paths in a vector: `files <- dir("data/", pattern = "\\.csv$", full.names = TRUE)`.

a) Write a for loop that will read in each file individually.

b) Write a for loop that will load the files into a single data frame.


::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex 11

# First, store their paths in a vector: `files <- dir("data/", pattern = "\\.csv$", full.names = TRUE)`.

# a) Write a for loop that will read in each file individually.

files <- dir("data/", pattern = "\\.csv$", full.names = TRUE)

individual_files <- list()

for (file in files) {
  individual_files[[file]] <- read.csv(file)
}

# b) Write a for loop that will load the files into a single data frame.

single_frame <- list()
  
for (file in files) {
  df <- read_csv(file)
  single_frame <- append(single_frame, list(df))
}

single_frame <- bind_rows(single_frame)

```


:::
